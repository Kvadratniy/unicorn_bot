import { Markup } from 'telegraf';
import { clearLastKeyboard, replyMessage, replyWithKeyboard } from '../../utils/keyboard';
import { deleteMessageSafe, getCallbackData } from '../../utils/helpers';
import { scheduleService } from '../../feature/schedule/schedule.service';

/**
 * –®–∞–≥ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
 *  - 'next'  ‚Üí –µ—Å–ª–∏ –ø—Ä–µ–¥–º–µ—Ç –≤—ã–±—Ä–∞–Ω
 *  - 'leave' ‚Üí –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω–∞
 *  - undefined ‚Üí –µ—Å–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑–∞–ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –∂–¥—ë–º –≤—ã–±–æ—Ä–∞
 */
export async function selectSubjectStep(ctx: any, state: any): Promise<'next' | 'leave' | void> {
    const data = getCallbackData(ctx);

    if (data === 'cancel_subject') {
        await replyMessage(ctx, '‚ùå –í—ã–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞ –æ—Ç–º–µ–Ω—ë–Ω.');
        return 'leave';
    }

    const match = data.match(/subject_(\d+)/);
    if (match) {
        const data = getCallbackData(ctx);
        await deleteMessageSafe(ctx);

        const subjectId = Number(match[1]);
        state.subjectId = subjectId;

        await clearLastKeyboard(ctx);

        const subject = await scheduleService.getSubjectWithTeachers(subjectId);
        if (!subject) {
            await replyMessage(ctx, '‚ö†Ô∏è –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.');
            return 'leave';
        }

        await replyMessage(ctx, `üìò –í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–µ–¥–º–µ—Ç: *${subject.name}*`, {
            parse_mode: 'Markdown',
        });
        return 'next';
    }

    // ‚úÖ –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ —à–∞–≥–∞ ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    // await clearLastKeyboard(ctx);

    const subjects = await scheduleService.getSubjects();
    if (!subjects.length) {
        await replyMessage(ctx, '‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤.');
        return 'leave';
    }

    const buttons = subjects.map((s) => [Markup.button.callback(s.name, `subject_${s.id}`)]);
    buttons.push([Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_subject')]);

    await replyWithKeyboard(ctx, 'üìö –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:', Markup.inlineKeyboard(buttons));

    return;
}
