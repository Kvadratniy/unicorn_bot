import { scheduleService } from '../../feature/schedule/schedule.service';
import { replyMessage } from '../../utils/keyboard';

function hhmm(d: Date) {
    return d.toLocaleTimeString('ru-RU', {
        hour: '2-digit',
        minute: '2-digit',
        timeZone: 'Europe/Moscow',
    });
}

/**
 * –®–∞–≥ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–Ω—è—Ç–∏—è
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
 *  - 'next' ‚Üí –µ—Å–ª–∏ –≤—Å—ë –æ–∫ (–≤—Ä–µ–º—è –≤—ã–±—Ä–∞–Ω–æ –∏ —Å–≤–æ–±–æ–¥–Ω–æ)
 *  - undefined ‚Üí –µ—Å–ª–∏ –∂–¥—ë–º –≤–≤–æ–¥–∞
 *  - 'leave' ‚Üí –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ –∏–ª–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç
 */
export async function selectTimeStep(ctx: any, state: any): Promise<'next' | 'leave' | void> {
    // === üïê –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç (–≤—Ä–µ–º—è) ===
    if (ctx.message && 'text' in ctx.message) {
        const time = ctx.message.text.trim();

        if (!/^\d{2}:\d{2}$/.test(time)) {
            await replyMessage(
                ctx,
                '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ –≤–∏–¥–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30).',
            );
            return;
        }

        const { teacherId, subjectId, date, type } = state;
        const localDate = new Date(`${date}T${time}:00+03:00`);

        const subject = await scheduleService.getSubjectWithTeachers(subjectId!);
        const duration = type === 'TRIAL' ? 40 : subject?.duration || 60;
        const endDate = new Date(localDate.getTime() + duration * 60000);

        const conflict = await scheduleService.hasConflict(teacherId!, localDate, endDate);
        if (conflict) {
            await replyMessage(ctx, '‚ö†Ô∏è –í —ç—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –µ—Å—Ç—å –∑–∞–Ω—è—Ç–∏–µ!');
            return;
        }

        state.startDate = localDate;
        state.endDate = endDate;

        await replyMessage(
            ctx,
            `‚úÖ –í—Ä–µ–º—è –≤—ã–±—Ä–∞–Ω–æ!\nüìÖ ${localDate.toLocaleDateString('ru-RU')}\nüïí ${hhmm(localDate)} ‚Äì ${hhmm(endDate)}`,
            { parse_mode: 'Markdown' },
        );

        return 'next';
    }

    // === üïì –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ ‚Äî –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è ===
    await replyMessage(ctx, `üïì –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∑–∞–Ω—è—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ *–ß–ß:–ú–ú*`, {
        parse_mode: 'Markdown',
    });

    return; // –æ—Å—Ç–∞—ë–º—Å—è –Ω–∞ —à–∞–≥–µ, –∂–¥—ë–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥
}
