import { buildDateButtons } from '../../utils/date-buttons';
import { getCallbackData } from '../../utils/helpers';
import { getScheduleTextByDate } from '../../feature/schedule/utils/schedule-day-list';
import { replyMessage } from '../../utils/keyboard';

export async function selectDateStep(ctx: any, state: any) {
    const data = getCallbackData(ctx);
    console.log('data: ', data);

    // üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é (‚¨Ö / ‚û°)
    const offsetMatch = data?.match(/date_(prev|next)_(\-?\d+)/);
    if (offsetMatch) {
        const offset = parseInt(offsetMatch[2], 10);
        console.log('offsetMatch offset:', offset);
        await ctx.editMessageReplyMarkup(buildDateButtons(offset, 'date_').reply_markup);
        return; // –æ—Å—Ç–∞—ë–º—Å—è –Ω–∞ —ç—Ç–æ–º —à–∞–≥–µ
    }

    // üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã
    const match = data?.match(/date_(\d{4}-\d{2}-\d{2})/);
    if (match) {
        const dateIso = match[1];
        state.date = dateIso;
        const schedule = await getScheduleTextByDate(dateIso);
        await replyMessage(ctx, schedule, { parse_mode: 'Markdown' });
        return 'next';
    }

    // üîπ –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é
    await replyMessage(ctx, 'üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:', buildDateButtons(0, 'date_'));
}
