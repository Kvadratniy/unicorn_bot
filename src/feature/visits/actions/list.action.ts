import { Markup } from 'telegraf';
import { toMSKfromUTC } from '../../../utils/time';
import { replyMessage } from '../../../utils/keyboard';
import { visitService, VisitWithRelations } from '../visit.service';

const PAGE_SIZE = 5;

// === –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏ ===
function formatVisit(v: VisitWithRelations): string {
    const date = toMSKfromUTC(v.date).toLocaleString('ru-RU', {
        day: '2-digit',
        month: 'short',
        hour: '2-digit',
        minute: '2-digit',
    });

    const subject = v.schedule?.subject?.name ?? '–ë–µ–∑ –ø—Ä–µ–¥–º–µ—Ç–∞';
    const teacherName = v.schedule?.teacher?.name ?? '‚Äî';
    const studentName = `${v.student.firstName}${v.student.lastName ? ' ' + v.student.lastName : ''}`;
    const abonementName = v.abonement?.template?.name ?? '‚Äî';
    const paymentStatus = v.payment?.status ?? '‚Äî';
    const lessonType = v.schedule?.type ?? 'ONETIME';

    return [
        `üìÖ *${date}*`,
        `üìò ${subject}`,
        `üë®‚Äçüè´ ${teacherName}`,
        `üë§ ${studentName}`,
        `üßæ –¢–∏–ø: ${lessonType}`,
        `üí∞ –û–ø–ª–∞—Ç–∞: ${paymentStatus}`,
        `üéüÔ∏è –ê–±–æ–Ω–µ–º–µ–Ω—Ç: ${abonementName}`,
        '',
    ].join('\n');
}

// === –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤–∏–∑–∏—Ç–æ–≤ ===
function formatVisitsList(visits: VisitWithRelations[], page: number, total: number): string {
    const header = `üìã *–í–∏–∑–∏—Ç—ã* (—Å—Ç—Ä. ${page})\n–í—Å–µ–≥–æ: ${total}\n\n`;
    const body = visits.map(formatVisit).join('');
    return header + body;
}

// === –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∫–∏ ===
function buildWhereClause(user: any) {
    if (user.role === 'TEACHER' && user.teacherId) {
        return { schedule: { teacherId: user.teacherId } };
    }
    return {};
}

// === –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ===
function buildKeyboard(page: number, totalCount: number, visitsCount: number) {
    const buttons: any[] = [];

    if (page > 1) buttons.push(Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', `visits_page_${page - 1}`));
    if ((page - 1) * PAGE_SIZE + visitsCount < totalCount)
        buttons.push(Markup.button.callback('‚è≠ –î–∞–ª–µ–µ', `visits_page_${page + 1}`));

    return Markup.inlineKeyboard([
        buttons,
        [Markup.button.callback('üìç –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')],
    ]);
}

// === –û—Å–Ω–æ–≤–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ ===
export const visitsAction = async (ctx: any) => {
    try {
        const data = ctx.callbackQuery?.data;
        const match = data?.match(/visits_page_(\d+)/);
        const page = match ? Number(match[1]) : 1;
        const skip = (page - 1) * PAGE_SIZE;

        const user = await visitService.getUserByTelegramId(String(ctx.from.id));
        if (!user) return replyMessage(ctx, '‚ö†Ô∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.');

        const whereClause = buildWhereClause(user);
        const totalCount = await visitService.getVisitsCount(whereClause);

        const visits = await visitService.getVisits(whereClause, skip, PAGE_SIZE);
        if (!visits.length) return replyMessage(ctx, 'üòï –í–∏–∑–∏—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.');

        const keyboard = buildKeyboard(page, totalCount, visits.length);
        const messageText = formatVisitsList(visits, page, totalCount);
        const messageOptions = { parse_mode: 'Markdown', ...keyboard };

        if (ctx.callbackQuery?.message) {
            try {
                await ctx.editMessageText(messageText, {
                    chat_id: ctx.chat.id,
                    message_id: ctx.callbackQuery.message.message_id,
                    ...messageOptions,
                });
            } catch (e: any) {
                console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:', e.message);
                await replyMessage(ctx, messageText, messageOptions);
            }
        } else {
            await replyMessage(ctx, messageText, messageOptions);
        }
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∏–∑–∏—Ç–æ–≤:', err);
        await replyMessage(ctx, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –≤–∏–∑–∏—Ç–æ–≤.');
    }
};
