import { Markup } from 'telegraf';
import { studentService } from '../student.service';
import { replyWithKeyboard } from '../../../utils/keyboard';

export async function showStudentsListAction(ctx: any, page = 1) {
    try {
        if (ctx.callbackQuery) await ctx.answerCbQuery().catch(() => {});

        const user = ctx.user;
        const isAdmin = user?.role === 'ADMIN';
        const isTeacher = user?.role === 'TEACHER' && user.teacher?.id;

        // --- 1Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º —É—á–µ–Ω–∏–∫–æ–≤ ---
        let students: any[] = [];
        let totalPages = 1;

        if (isTeacher) {
            students = await studentService.getStudentsForTeacher(user.teacher.id);
            totalPages = Math.max(1, Math.ceil(students.length / 5));
            const start = (page - 1) * 5;
            students = students.slice(start, start + 5);

            if (!students.length) {
                return replyWithKeyboard(
                    ctx,
                    'üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —É—á–µ–Ω–∏–∫–æ–≤ —Å –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞–º–∏.',
                    Markup.inlineKeyboard([[Markup.button.callback('‚¨Ö –ù–∞–∑–∞–¥', 'main_menu')]]),
                );
            }
        } else {
            const result = await studentService.getStudentsPaginated(page);
            students = result.students;
            totalPages = result.totalPages;
        }

        // --- 2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ ---
        if (!students.length) {
            const buttons = [
                ...(isAdmin ? [[Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å', 'student_add')]] : []),
                [Markup.button.callback('‚¨Ö –ù–∞–∑–∞–¥', 'main_menu')],
            ];

            return replyWithKeyboard(
                ctx,
                'üì≠ –°–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤ –ø—É—Å—Ç.',
                Markup.inlineKeyboard(buttons),
            );
        }

        // --- 3Ô∏è‚É£ –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç ---
        const studentsText = students
            .map((s) => {
                const fullName = `${s.firstName} ${s.lastName ?? ''}`.trim();

                const abonements = s.abonements.length
                    ? s.abonements
                          .map((a: any) => {
                              const total = a.template?.lessons ?? 0;
                              const used = a.visits?.length ?? 0;
                              const name = a.template?.name ?? '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';
                              return `${name} (${used}/${total})`;
                          })
                          .join(', ')
                    : '–Ω–µ—Ç';

                return `üë§ *${fullName}*\nüé´ ${abonements}\n–ü–æ–¥—Ä–æ–±–Ω–µ–µ: /student${s.id}\n`;
            })
            .join('\n');

        const text = `üìã *–ö–ª–∏–µ–Ω—Ç—ã (—Å—Ç—Ä. ${page}/${totalPages}):*\n\n${studentsText}`;

        // --- 4Ô∏è‚É£ –ù–∞–≤–∏–≥–∞—Ü–∏—è ---
        const navButtons = [];
        if (page > 1)
            navButtons.push(Markup.button.callback('‚¨Ö –ü—Ä–µ–¥—ã–¥—É—â–∞—è', `students_page_${page - 1}`));
        if (page < totalPages)
            navButtons.push(Markup.button.callback('–°–ª–µ–¥—É—é—â–∞—è ‚û°', `students_page_${page + 1}`));

        const keyboard = [
            ...(navButtons.length ? [navButtons] : []),
            [Markup.button.callback('üîç –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É', 'student_search')],
            ...(isAdmin ? [[Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ', 'student_add')]] : []),
            [Markup.button.callback('‚¨Ö –ù–∞–∑–∞–¥', 'main_menu')],
        ];

        // --- 5Ô∏è‚É£ –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ---
        await replyWithKeyboard(ctx, text, Markup.inlineKeyboard(keyboard), {
            parse_mode: 'Markdown',
        });
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ showStudentsListAction:', err);
        await ctx.reply('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É—á–µ–Ω–∏–∫–æ–≤.');
    }
}
