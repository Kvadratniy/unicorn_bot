import { Markup } from 'telegraf';
import { replyWithKeyboard } from '../../../utils/keyboard';
import { studentService } from '../student.service';

/**
 * üìò –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–µ–Ω–∏–∫–µ
 */
export async function showStudentDetailsAction(ctx: any, idParam?: number) {
    try {
        if (ctx.callbackQuery) await ctx.answerCbQuery().catch(() => {});
        const user = ctx.user;
        const id = idParam ?? NaN;

        if (isNaN(id)) return ctx.reply('‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.');

        const isTeacher = user?.role === 'TEACHER' && user.teacherId;
        const teacherId = isTeacher ? user.teacherId : undefined;

        // 1Ô∏è‚É£ –ó–∞–≥—Ä—É–∂–∞–µ–º —É—á–µ–Ω–∏–∫–∞
        const student = await studentService.getStudentById(id);
        if (!student) return ctx.reply('‚ùå –£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.');

        // 2Ô∏è‚É£ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ã
        const abonements = studentService.filterAbonementsForTeacher(student.abonements, teacherId);
        const activeAbonement = studentService.findActiveAbonement(abonements);
        const abonementsText = studentService.formatAbonements(student, abonements, !!isTeacher);

        // 3Ô∏è‚É£ –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        const teacherNames =
            [...new Set(abonements.map((a) => a.teacher?.name).filter(Boolean))].join(', ') || '‚Äî';
        const fullName = `${student.firstName} ${student.lastName ?? ''}`.trim();

        const text =
            `üßë‚Äçüéì *${fullName}*\n\n` +
            `üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* ${student.phone || '‚Äî'}\n` +
            `üéÇ *–í–æ–∑—Ä–∞—Å—Ç:* ${student.age ?? '‚Äî'}\n` +
            `üóí *–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:* ${student.note ?? '‚Äî'}\n\n` +
            `üë®‚Äçüè´ *–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏:* ${teacherNames}\n\n` +
            `üé´ *–ê–±–æ–Ω–µ–º–µ–Ω—Ç—ã:*\n${abonementsText}`;

        // 4Ô∏è‚É£ –ö–Ω–æ–ø–∫–∏
        const buttons: any[][] = [];
        const hasSchedules = student.schedules.length > 0;

        if (user.role === 'ADMIN') {
            const adminButtons = [
                Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç', `abonement_add_${student.id}`),
            ];

            if (!hasSchedules) {
                adminButtons.push(
                    Markup.button.callback(
                        'üìÖ –ó–∞–ø–∏—Å–∞—Ç—å –Ω–∞ –ø—Ä–æ–±–Ω–æ–µ',
                        `add_trial_student_lesson_${student.id}`,
                    ),
                );
            }
            buttons.push(adminButtons);
        }

        if (isTeacher) {
            const teacherButtons = [
                activeAbonement
                    ? Markup.button.callback(
                          'üìÖ –ó–∞–ø–∏—Å–∞—Ç—å –ø–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç—É',
                          `add_abonement_student_lesson_${student.id}`,
                      )
                    : Markup.button.callback(
                          'üìÖ –ó–∞–ø–∏—Å–∞—Ç—å –Ω–∞ —Ä–∞–∑–æ–≤–æ–µ',
                          `add_onetime_student_lesson_${student.id}`,
                      ),
            ];
            buttons.push(teacherButtons);
        }

        buttons.push([Markup.button.callback('‚¨Ö –ù–∞–∑–∞–¥', 'menu_students')]);

        await replyWithKeyboard(ctx, text, Markup.inlineKeyboard(buttons), {
            parse_mode: 'Markdown',
        });
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ showStudentDetailsAction:', err);
        await ctx.reply('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—á–µ–Ω–∏–∫–µ.');
    }
}
