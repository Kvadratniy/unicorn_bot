import { Scenes, Markup } from 'telegraf';
import { Message } from 'telegraf/typings/core/types/typegram';
import { studentService } from '../student.service';
import { clearLastKeyboard, replyWithKeyboard } from '../../../utils/keyboard';

/**
 * üîç –°—Ü–µ–Ω–∞ –ø–æ–∏—Å–∫–∞ —É—á–µ–Ω–∏–∫–∞ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
 */
export const searchStudentScene = new Scenes.WizardScene<UnicornWizardContext>(
    'student-search-wizard',

    // 1Ô∏è‚É£ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
    async (ctx) => {
        await clearLastKeyboard(ctx);
        await ctx.reply('üìû –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–∏–ª–∏ —á–∞—Å—Ç—å):');
        return ctx.wizard.next();
    },

    // 2Ô∏è‚É£ –ü–æ–∏—Å–∫
    async (ctx: any) => {
        const msg = ctx.message as Message.TextMessage | undefined;
        if (!msg?.text) return;

        const query = msg.text.trim();
        ctx.scene.session.query = query;

        const students = await studentService.searchByPhone(query);

        // üßæ –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        if (!students.length) {
            const keyboard = Markup.inlineKeyboard([
                [Markup.button.callback('‚¨Ö –û—Ç–º–µ–Ω–∞', 'cancel_student_search')],
            ]);

            await replyWithKeyboard(
                ctx,
                `‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É *"${query}"*.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –ø–æ–∏—Å–∫.`,
                keyboard,
                { parse_mode: 'Markdown' },
            );
            return;
        }

        // ‚úÖ –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        let text = `üìû *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ "${query}":*\n\n`;

        for (const s of students) {
            const fullName = `${s.firstName} ${s.lastName ?? ''}`.trim();

            // üß† –ï—Å–ª–∏ teacherId —á–µ—Ä–µ–∑ –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ã
            const teacherNames =
                s.abonements
                    .map((a: any) => a.teacher?.name)
                    .filter(Boolean)
                    .join(', ') || '‚Äî';

            const abonements =
                s.abonements.length > 0
                    ? s.abonements.map((a: any) => a.template?.name ?? '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è').join(', ')
                    : '–Ω–µ—Ç';

            text +=
                `üë§ *${fullName}*\n` +
                `üìû ${s.phone || '‚Äî'}\n` +
                `üë®‚Äçüè´ ${teacherNames}\n` +
                `üé´ ${abonements}\n` +
                `–ü–æ–¥—Ä–æ–±–Ω–µ–µ: /student${s.id}\n\n`;
        }

        const keyboard = Markup.inlineKeyboard([
            [Markup.button.callback('‚¨Ö –ù–∞–∑–∞–¥', 'menu_students')],
        ]);

        await replyWithKeyboard(ctx, text, keyboard, { parse_mode: 'Markdown' });
        return ctx.scene.leave();
    },
);

/**
 * üîπ –•—ç–Ω–¥–ª–µ—Ä –æ—Ç–º–µ–Ω—ã –ø–æ–∏—Å–∫–∞
 */
export function registerSearchStudentCancelHandler(bot: any) {
    bot.action('cancel_student_search', async (ctx: any) => {
        await ctx.answerCbQuery().catch(() => {});
        await ctx.scene.leave();
        await ctx.scene.enter('students-menu'); // –∏–ª–∏ –≤—ã–∑–æ–≤ showStudentsListAction(ctx)
    });
}
