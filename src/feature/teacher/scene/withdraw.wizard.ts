import { Scenes, Markup } from 'telegraf';
import { teacherService } from '../teacher.service';
import { clearLastKeyboard, replyMessage, replyWithKeyboard } from '../../../utils/keyboard';
import { getCallbackData } from '../../../utils/helpers';
import { showMainMenu } from '../../menu/menus'; // ‚öôÔ∏è —É–±–µ–¥–∏—Å—å, —á—Ç–æ –ø—É—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π

/**
 * Wizard –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã–ø–ª–∞—Ç—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é
 */
export const withdrawTeacherWizard = new Scenes.WizardScene<any>(
    'withdraw-teacher-wizard',

    // 1Ô∏è‚É£ –®–∞–≥ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
    async (ctx) => {
        await clearLastKeyboard(ctx);
        const teachers = await teacherService.getAllTeachers();

        if (!teachers.length) {
            await replyMessage(ctx, '‚ùå –ù–µ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π.');
            return ctx.scene.leave();
        }

        const buttons = teachers.map((t) => [
            Markup.button.callback(`${t.name} ‚Äî üí∞ ${t.balance.toFixed(2)}‚ÇΩ`, `withdraw_${t.id}`),
        ]);

        // ‚¨Ö –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        buttons.push([Markup.button.callback('‚¨Ö –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', 'withdraw_cancel')]);

        await replyWithKeyboard(
            ctx,
            'üí∞ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –≤—ã–ø–ª–∞—Ç—É:',
            Markup.inlineKeyboard(buttons)
        );
        ctx.wizard.next();
    },

    // 2Ô∏è‚É£ –®–∞–≥ –≤–≤–æ–¥–∞ —Å—É–º–º—ã
    async (ctx) => {
        const data = getCallbackData(ctx);

        // üîô –û—Ç–º–µ–Ω–∞
        if (data === 'withdraw_cancel') {
            await replyMessage(ctx, '‚Ü© –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.');
            await showMainMenu(ctx);
            return ctx.scene.leave();
        }

        if (!data?.startsWith('withdraw_')) return;

        const teacherId = Number(data.split('_')[1]);
        const teacher = await teacherService.getTeacherById(teacherId);
        if (!teacher) {
            await replyMessage(ctx, '‚ö†Ô∏è –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
            return ctx.scene.leave();
        }

        ctx.wizard.state.teacherId = teacherId;
        ctx.wizard.state.teacherName = teacher.name;

        await ctx.answerCbQuery().catch(() => {});
        await replyMessage(
            ctx,
            `–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã–ø–ª–∞—Ç—ã –¥–ª—è *${teacher.name}* (–±–∞–ª–∞–Ω—Å: ${teacher.balance.toFixed(2)}‚ÇΩ):\n\n`,
            Markup.inlineKeyboard([
                [Markup.button.callback('‚¨Ö –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', 'withdraw_cancel')],
            ])
        );

        ctx.wizard.next();
    },

    // 3Ô∏è‚É£ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—ã–ø–ª–∞—Ç—ã
    async (ctx) => {
        const data = getCallbackData(ctx);
        if (data === 'withdraw_cancel') {
            await replyMessage(ctx, '‚Ü© –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.');
            await showMainMenu(ctx);
            return ctx.scene.leave();
        }

        const amountText = ctx.message?.text?.trim();
        const amount = Number(amountText);

        if (isNaN(amount) || amount <= 0) {
            await replyMessage(ctx, '‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1500).');
            return;
        }

        const { teacherId, teacherName } = ctx.wizard.state;
        try {
            const updatedTeacher = await teacherService.withdraw(
                teacherId,
                amount,
                '–í—ã–ø–ª–∞—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–µ—Ä–µ–∑ Telegram'
            );

            await replyMessage(
                ctx,
                `‚úÖ –í—ã–ø–ª–∞—Ç–∞ *${amount}‚ÇΩ* –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é *${teacherName}* —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞.\n\n` +
                `–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: *${updatedTeacher?.balance.toFixed(2)}‚ÇΩ*`,
                { parse_mode: 'Markdown' }
            );

            await showMainMenu(ctx);
            return ctx.scene.leave();
        } catch (err: any) {
            console.error('–û—à–∏–±–∫–∞ –≤—ã–ø–ª–∞—Ç—ã:', err);
            await replyMessage(ctx, `‚ùå –û—à–∏–±–∫–∞: ${err.message || '–Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ñ–æ—Ä–º–∏—Ç—å –≤—ã–ø–ª–∞—Ç—É.'}`);
            await showMainMenu(ctx);
            return ctx.scene.leave();
        }
    }
);
