import prisma from '../../core/prisma';
import { toMSKfromUTC, toUTCfromMSK } from '../../utils/time';

export const teacherService = {
    /* -------------------------------------------------------------------------- */
    /* üóì –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è                                                */
    /* -------------------------------------------------------------------------- */

    /** –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è */
    async createAvailability(teacherId: number, startDate: Date, endDate: Date) {
        return prisma.teacherAvailability.create({
            data: { teacherId, startDate, endDate },
        });
    },

    /** –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∑–∞ –¥–µ–Ω—å (–≤—Ä–µ–º—è –≤ –ú–°–ö) */
    async getTeacherAvailabilityForDay(teacherId: number, dateIso: string) {
        const startUtc = new Date(`${dateIso}T00:00:00Z`);
        const endUtc = new Date(`${dateIso}T23:59:59Z`);

        const intervals = await prisma.teacherAvailability.findMany({
            where: { teacherId, startDate: { gte: startUtc, lte: endUtc } },
            orderBy: { startDate: 'asc' },
        });

        return intervals.map((i) => {
            const startMsk = toMSKfromUTC(i.startDate);
            const endMsk = toMSKfromUTC(i.endDate);
            const start = startMsk.toLocaleTimeString('ru-RU', {
                hour: '2-digit',
                minute: '2-digit',
            });
            const end = endMsk.toLocaleTimeString('ru-RU', {
                hour: '2-digit',
                minute: '2-digit',
            });
            return `üïì ${start}‚Äì${end}`;
        });
    },

    /** –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å (–≤ UTC) */
    async getAvailabilityForDay(teacherId: number, dayStart: Date, dayEnd: Date) {
        return prisma.teacherAvailability.findMany({
            where: {
                teacherId,
                startDate: { gte: dayStart },
                endDate: { lte: dayEnd },
            },
            orderBy: { startDate: 'asc' },
        });
    },

    /** –£–¥–∞–ª–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ */
    async deleteAvailability(id: number, teacherId: number) {
        return prisma.teacherAvailability.deleteMany({
            where: { id, teacherId },
        });
    },

    /** –ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ –¥–Ω–∏ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É (—É –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞) */
    async getFreeDaysBySubject(subjectId: number): Promise<string[]> {
        const teachers = await prisma.teacher.findMany({
            where: { subjects: { some: { id: subjectId } } },
            select: {
                id: true,
                name: true,
                TeacherAvailability: { select: { startDate: true, endDate: true } },
                schedules: { select: { startDate: true, endDate: true } },
            },
        });

        const freeDays = new Set<string>();
        const today = new Date();
        today.setHours(0, 0, 0, 0);

        for (const teacher of teachers) {
            const busy = teacher.schedules.map((s) => ({
                start: s.startDate.getTime(),
                end: s.endDate.getTime(),
            }));

            for (const avail of teacher.TeacherAvailability) {
                let day = new Date(avail.startDate);
                while (day <= avail.endDate) {
                    if (day < today) {
                        day.setDate(day.getDate() + 1);
                        continue;
                    }

                    const startOfDay = new Date(day);
                    startOfDay.setHours(0, 0, 0, 0);
                    const endOfDay = new Date(day);
                    endOfDay.setHours(23, 59, 59, 999);

                    const availabilityStart = Math.max(
                        avail.startDate.getTime(),
                        startOfDay.getTime(),
                    );
                    const availabilityEnd = Math.min(avail.endDate.getTime(), endOfDay.getTime());

                    let freeRanges = [{ start: availabilityStart, end: availabilityEnd }];

                    for (const b of busy) {
                        freeRanges = freeRanges.flatMap((range) => {
                            if (b.end <= range.start || b.start >= range.end) return [range];
                            const newRanges = [];
                            if (b.start > range.start)
                                newRanges.push({ start: range.start, end: b.start });
                            if (b.end < range.end) newRanges.push({ start: b.end, end: range.end });
                            return newRanges;
                        });
                    }

                    if (freeRanges.some((r) => r.end - r.start > 5 * 60 * 1000)) {
                        freeDays.add(startOfDay.toISOString().split('T')[0]);
                    }

                    day.setDate(day.getDate() + 1);
                }
            }
        }

        return Array.from(freeDays).sort();
    },

    /* -------------------------------------------------------------------------- */
    /* üë®‚Äçüè´ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è—Ö                                            */
    /* -------------------------------------------------------------------------- */

    /** –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –ø–æ ID */
    async getTeacherById(id: number) {
        return prisma.teacher.findUnique({
            where: { id },
            include: {
                subjects: { select: { id: true, name: true } },
                TeacherAvailability: true,
            },
        });
    },

    /** –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π */
    async getAllTeachers() {
        return prisma.teacher.findMany({
            orderBy: { name: 'asc' },
            include: { subjects: true },
        });
    },

    /** –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É */
    async getTeachersBySubject(subjectId: number) {
        return prisma.teacher.findMany({
            where: { subjects: { some: { id: subjectId } } },
            orderBy: { name: 'asc' },
            include: { subjects: true },
        });
    },

    /* -------------------------------------------------------------------------- */
    /* üí∞ –ë–∞–ª–∞–Ω—Å –∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π                                       */
    /* -------------------------------------------------------------------------- */

    /** –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è */
    async getBalance(teacherId: number) {
        const teacher = await prisma.teacher.findUnique({ where: { id: teacherId } });
        return teacher?.balance ?? 0;
    },

    /** –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ —É—Ä–æ–∫–∞) */
    async increaseBalance(teacherId: number, amount: number, description = '–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ') {
        await prisma.teacher.update({
            where: { id: teacherId },
            data: { balance: { increment: amount } },
        });

        await prisma.teacherTransaction.create({
            data: {
                teacherId,
                type: 'LESSON_INCOME',
                amount,
                description,
            },
        });
    },

    /** –°–¥–µ–ª–∞—Ç—å –≤—ã–ø–ª–∞—Ç—É –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é (WITHDRAWAL) */
    async withdraw(teacherId: number, amount: number, description = '–í—ã–ø–ª–∞—Ç–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é') {
        const teacher = await prisma.teacher.findUnique({ where: { id: teacherId } });
        if (!teacher) throw new Error('–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');

        if (teacher.balance < amount) {
            throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ');
        }

        await prisma.$transaction([
            prisma.teacher.update({
                where: { id: teacherId },
                data: { balance: { decrement: amount } },
            }),
            prisma.teacherTransaction.create({
                data: {
                    teacherId,
                    type: 'WITHDRAWAL',
                    amount: -amount,
                    description,
                },
            }),
        ]);

        return await prisma.teacher.findUnique({ where: { id: teacherId } });
    },

    /** –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è */
    async getTransactions(teacherId: number, limit = 20) {
        return prisma.teacherTransaction.findMany({
            where: { teacherId },
            orderBy: { date: 'desc' },
            take: limit,
        });
    },
};
