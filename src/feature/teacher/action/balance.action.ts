import { Markup } from 'telegraf';
import prisma from '../../../core/prisma';

/**
 * Action –¥–ª—è –ø–æ–∫–∞–∑–∞ –±–∞–ª–∞–Ω—Å–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
 */
export async function showTeacherBalanceAction(ctx: any) {
    try {
        await ctx.answerCbQuery();

        const telegramId = String(ctx.from.id);

        const user = await prisma.user.findUnique({
            where: { telegramId },
            include: { teacher: true },
        });

        if (!user || !user.teacher) {
            return ctx.editMessageText('‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º.', {
                reply_markup: Markup.inlineKeyboard([
                    [Markup.button.callback('‚¨Ö –ù–∞–∑–∞–¥', 'main_menu')],
                ]).reply_markup,
            });
        }

        const balance = user.teacher.balance.toFixed(2);

        const text = `üí∞ *–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:* ${balance} ‚ÇΩ`;

        await ctx.editMessageText(text, {
            parse_mode: 'Markdown',
            reply_markup: Markup.inlineKeyboard([[Markup.button.callback('‚¨Ö –ù–∞–∑–∞–¥', 'main_menu')]])
                .reply_markup,
        });
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:', err);

        await ctx.editMessageText('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞.', {
            reply_markup: Markup.inlineKeyboard([[Markup.button.callback('‚¨Ö –ù–∞–∑–∞–¥', 'main_menu')]])
                .reply_markup,
        });
    }
}
