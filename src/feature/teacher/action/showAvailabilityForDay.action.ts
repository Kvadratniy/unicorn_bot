import { Markup } from 'telegraf';
import { teacherService } from '../teacher.service';
import { deleteMessageSafe } from '../../../utils/helpers';

export async function showAvailabilityForDay(ctx: any, dateIso?: string) {
    try {
        if (!dateIso) return ctx.reply('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–∞—Ç—É.');
        await deleteMessageSafe(ctx);

        const teacherId = ctx.user?.teacher?.id;
        if (!teacherId) return ctx.reply('‚ö†Ô∏è –í—ã –Ω–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å.');

        // 1Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –∏–∑ —Å–µ—Ä–≤–∏—Å–∞
        const intervals = await teacherService.getTeacherAvailabilityForDay(teacherId, dateIso);

        // 2Ô∏è‚É£ –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        const list = intervals.length ? intervals.join('\n') : '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤.';

        // 3Ô∏è‚É£ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞—Ç –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        const date = new Date(dateIso);
        const prevDate = new Date(date);
        const nextDate = new Date(date);
        prevDate.setDate(date.getDate() - 1);
        nextDate.setDate(date.getDate() + 1);

        const prevIso = prevDate.toISOString().split('T')[0];
        const nextIso = nextDate.toISOString().split('T')[0];

        const dateLabel = date.toLocaleDateString('ru-RU', {
            day: '2-digit',
            month: 'long',
            weekday: 'long',
        });

        // 4Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await ctx.reply(`üìÜ *${dateLabel}*\n\n${list}`, {
            parse_mode: 'Markdown',
            ...Markup.inlineKeyboard([
                [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å', `availability_add_${dateIso}`)],
                [
                    Markup.button.callback('‚¨Ö –ü—Ä–µ–¥—ã–¥—É—â–∏–π –¥–µ–Ω—å', `availability_day_${prevIso}`),
                    Markup.button.callback('‚û° –°–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å', `availability_day_${nextIso}`),
                ],
                [Markup.button.callback('‚¨Ö –ù–∞–∑–∞–¥', 'availability_menu')],
            ]),
        });
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ showAvailabilityForDay:', err);
        await ctx.reply('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.');
    }
}
