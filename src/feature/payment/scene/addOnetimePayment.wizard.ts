import { Scenes, Markup } from 'telegraf';
import { getCallbackData, deleteMessageSafe, getMessageText } from '../../../utils/helpers';
import { clearLastKeyboard, replyMessage, replyWithKeyboard } from '../../../utils/keyboard';
import { PaymentMethod } from '@prisma/client';
import { paymentService } from '../payment.service';

interface PaymentState {
    paymentId?: number;
    amount?: number;
    method?: PaymentMethod;
    comment?: string;
}

type PaymentContext = Scenes.WizardContext & {
    wizard: Scenes.WizardContextWizard<PaymentContext> & { state: PaymentState };
};

export const addOnetimePaymentWizard = new Scenes.WizardScene<PaymentContext>(
    'add-onetime-payment-wizard',

    /* -------------------------------------------------------------------------- */
    /* 1Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º ID –ø–ª–∞—Ç–µ–∂–∞                                                   */
    /* -------------------------------------------------------------------------- */
    async (ctx) => {
        const state = ctx.scene.state as PaymentState;

        // –ü–æ–ª—É—á–∞–µ–º ID –∏–∑ state –∏–ª–∏ callback
        const paymentId =
            state?.paymentId ||
            (() => {
                const data = getCallbackData(ctx);
                const match = data?.match(/payment_onetime(\d+)/);
                return match ? parseInt(match[1], 10) : NaN;
            })();

        if (isNaN(paymentId)) {
            await replyMessage(ctx, '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ–ø–ª–∞—Ç—É.');
            return ctx.scene.leave();
        }

        const payment = await paymentService.getPaymentById(paymentId);
        if (!payment) {
            await replyMessage(ctx, '‚ùå –ü–ª–∞—Ç—ë–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω.');
            return ctx.scene.leave();
        }

        if (payment.status === 'PAID') {
            await replyMessage(ctx, '‚úÖ –≠—Ç–æ—Ç –ø–ª–∞—Ç—ë–∂ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.');
            return ctx.scene.leave();
        }

        ctx.wizard.state.paymentId = paymentId;

        await replyMessage(
            ctx,
            `üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –æ–ø–ª–∞—Ç—ã –¥–ª—è —É—á–µ–Ω–∏–∫–∞ *${payment.student.firstName}*`,
            { parse_mode: 'Markdown' },
        );

        return ctx.wizard.next();
    },

    /* -------------------------------------------------------------------------- */
    /* 2Ô∏è‚É£ –í–≤–æ–¥ —Å—É–º–º—ã                                                             */
    /* -------------------------------------------------------------------------- */
    async (ctx) => {
        const amountStr = getMessageText(ctx);
        const amount = parseFloat(amountStr || '0');

        if (isNaN(amount) || amount <= 0) {
            await replyMessage(ctx, '‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2500)');
            return;
        }

        ctx.wizard.state.amount = amount;

        await replyWithKeyboard(
            ctx,
            'üí≥ –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã:',
            Markup.inlineKeyboard([
                [Markup.button.callback('üíµ –ù–∞–ª–∏—á–Ω—ã–µ', 'method_CASH')],
                [Markup.button.callback('üí≥ –ö–∞—Ä—Ç–∞', 'method_CARD')],
                [Markup.button.callback('üè¶ –ü–µ—Ä–µ–≤–æ–¥', 'method_TRANSFER')],
                [Markup.button.callback('üåê –û–Ω–ª–∞–π–Ω', 'method_ONLINE')],
                [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'payment_cancel')],
            ]),
        );

        return ctx.wizard.next();
    },

    /* -------------------------------------------------------------------------- */
    /* 3Ô∏è‚É£ –í—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã                                                   */
    /* -------------------------------------------------------------------------- */
    async (ctx) => {
        const data = getCallbackData(ctx);
        await deleteMessageSafe(ctx);

        if (data === 'payment_cancel') {
            await replyMessage(ctx, '‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω–æ.');
            return ctx.scene.leave();
        }

        const match = data.match(/method_(\w+)/);
        if (!match) return;

        const method = match[1] as PaymentMethod;
        ctx.wizard.state.method = method;

        await clearLastKeyboard(ctx);
        await replyMessage(ctx, 'üìù –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–∏–ª–∏ "-" –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ).');
        return ctx.wizard.next();
    },

    /* -------------------------------------------------------------------------- */
    /* 4Ô∏è‚É£ –í–≤–æ–¥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã                                   */
    /* -------------------------------------------------------------------------- */
    async (ctx) => {
        const comment = getMessageText(ctx) || '';
        if (!comment) {
            await replyMessage(ctx, '‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–∏–ª–∏ "-" –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ).');
            return;
        }

        ctx.wizard.state.comment = comment === '-' ? undefined : comment;
        const { paymentId, amount, method } = ctx.wizard.state;

        if (!paymentId || !amount || !method) {
            await replyMessage(ctx, '‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã.');
            return ctx.scene.leave();
        }

        const payment = await paymentService.getPaymentById(paymentId);
        if (!payment) {
            await replyMessage(ctx, '‚ùå –ü–ª–∞—Ç—ë–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω.');
            return ctx.scene.leave();
        }

        await paymentService.updatePayment(paymentId, {
            amount,
            method,
            comment: ctx.wizard.state.comment,
            status: 'PAID',
        });

        await replyMessage(
            ctx,
            `‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n` +
            `üí∞ *${amount} ‚ÇΩ*\n` +
            `üí≥ ${method}\n` +
            (comment && comment !== '-' ? `üìù ${comment}\n` : '') +
            `üìÖ ${new Date().toLocaleDateString('ru-RU')}`,
            { parse_mode: 'Markdown' },
        );

        return ctx.scene.leave();
    },
);
