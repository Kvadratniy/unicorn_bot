import { Markup } from 'telegraf';
import { scheduleService } from '../schedule.service';
import { clearLastKeyboard, replyWithKeyboard } from '../../../utils/keyboard';
import { toMSKfromUTC } from '../../../utils/time'; // ‚úÖ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
import { getCallbackData } from '../../../utils/helpers'; // üîß –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö

export async function showScheduleDetailsAction(ctx: any) {
    try {
        if (ctx.callbackQuery) await ctx.answerCbQuery().catch(() => {});
        await clearLastKeyboard(ctx);

        // --- 1Ô∏è‚É£ –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–Ω—è—Ç–∏—è ---
        const data = getCallbackData(ctx) || ctx.message?.text || '';
        const match = data.match(/details(\d+)/);
        const scheduleId = match ? parseInt(match[1], 10) : NaN;

        if (isNaN(scheduleId)) {
            return ctx.reply('‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∏–ª–∏ ID –∑–∞–Ω—è—Ç–∏—è.');
        }

        // --- 2Ô∏è‚É£ –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–Ω—è—Ç–∏–µ ---
        const schedule = await scheduleService.getScheduleDetails(scheduleId);
        if (!schedule) {
            return ctx.reply('‚ùå –ó–∞–Ω—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');
        }

        // --- 3Ô∏è‚É£ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è ---
        const mskDate = toMSKfromUTC(schedule.startDate);

        // --- 4Ô∏è‚É£ –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤ ---
        const studentsList = schedule.visits?.length
            ? schedule.visits.map((v) =>
                  `${v.student.firstName} ${v.student.lastName ?? ''}`.trim(),
              )
            : schedule.students?.map((s) => `${s.firstName} ${s.lastName ?? ''}`.trim()) || [];

        const students = studentsList.length ? studentsList.join(', ') : '‚Äî';

        // --- 5Ô∏è‚É£ –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ ---
        const message =
            `üïí *–î–µ—Ç–∞–ª–∏ –∑–∞–Ω—è—Ç–∏—è:*\n\n` +
            `üìÖ *–î–∞—Ç–∞:* ${mskDate.toLocaleDateString('ru-RU')}\n` +
            `‚è∞ *–í—Ä–µ–º—è:* ${mskDate.toLocaleTimeString('ru-RU', {
                hour: '2-digit',
                minute: '2-digit',
            })}\n\n` +
            `üë®‚Äçüè´ *–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å:* ${schedule.teacher.name}\n` +
            `üë®‚Äçüéì *–£—á–µ–Ω–∏–∫(–∏):* ${students}\n` +
            `üìò *–ü—Ä–µ–¥–º–µ—Ç:* ${schedule.subject.name}`;

        // --- 6Ô∏è‚É£ –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É ---
        const keyBack = mskDate.toISOString().split('T')[0];
        const keyboard = Markup.inlineKeyboard([
            [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', `cancel_schedule_${schedule.id}`)],
            [Markup.button.callback('‚¨Ö –ù–∞–∑–∞–¥', `schedule_day_${keyBack}`)],
        ]);

        // --- 7Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ---
        await replyWithKeyboard(ctx, message, keyboard, { parse_mode: 'Markdown' });
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –¥–µ—Ç–∞–ª–µ–π –∑–∞–Ω—è—Ç–∏—è:', err);
        await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–Ω—è—Ç–∏–∏.');
    }
}
