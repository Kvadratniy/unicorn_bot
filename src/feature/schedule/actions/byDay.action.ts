import { Markup } from 'telegraf';
import { scheduleService } from '../schedule.service';
import { mergeFreeSlots } from '../../../utils/mergeFreeSlots';
import { formatScheduleText } from '../../../utils/formatScheduleText';
import { clearLastKeyboard, replyMessage, replyWithKeyboard } from '../../../utils/keyboard';
import { deleteMessageSafe } from '../../../utils/helpers';
import { toUTCfromMSK } from '../../../utils/time';

export async function showScheduleByDayAction(ctx: any) {
    try {
        if (ctx.callbackQuery) await ctx.answerCbQuery().catch(() => {});
        await clearLastKeyboard(ctx);
        await deleteMessageSafe(ctx);

        const match = ctx.match?.[1];
        if (!match) return ctx.reply('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–∞—Ç—É.');

        // --- –≤—ã—á–∏—Å–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç ---
        const [year, month, day] = match.split('-').map(Number);
        const localDate = new Date(Date.UTC(year, month - 1, day));
        const nextLocalDay = new Date(Date.UTC(year, month - 1, day + 1));
        const startUTC = toUTCfromMSK(localDate);
        const endUTC = toUTCfromMSK(nextLocalDay);
        const currentDay = localDate.toLocaleDateString('ru-RU', { day: 'numeric', month: 'long' });

        // === –ó–∞–Ω—è—Ç–∏—è ===
        const schedules = await scheduleService.getSchedulesByDateRange(startUTC, endUTC);
        let text = `üìÜ *${currentDay}*\n\n` + formatScheduleText(schedules);

        // === –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π ===
        const user = ctx.user;
        if (user?.role === 'ADMIN') {
            const availabilities = await scheduleService.getTeacherAvailabilitiesByDay(
                startUTC,
                endUTC,
            );
            if (availabilities.length) {
                text += `üïì *–°–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π:*\n\n`;
                const freeSlots = mergeFreeSlots(availabilities, schedules);
                for (const tId in freeSlots) text += `${freeSlots[tId]}\n`;
            } else {
                text += `üïì *–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π.*\n`;
            }
        }

        // === –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ ===
        const prevDate = new Date(localDate);
        const nextDate = new Date(localDate);
        prevDate.setDate(localDate.getDate() - 1);
        nextDate.setDate(localDate.getDate() + 1);
        const prevIso = prevDate.toISOString().split('T')[0];
        const nextIso = nextDate.toISOString().split('T')[0];

        await replyMessage(ctx, text.trim(), { parse_mode: 'Markdown' });
        await replyWithKeyboard(
            ctx,
            '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
            Markup.inlineKeyboard([
                [
                    Markup.button.callback('‚¨Ö –ü—Ä–µ–¥—ã–¥—É—â–∏–π –¥–µ–Ω—å', `schedule_day_${prevIso}`),
                    Markup.button.callback('‚û° –°–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å', `schedule_day_${nextIso}`),
                ],
                [Markup.button.callback('üìã –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', 'schedule_menu')],
            ]),
        );
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ showScheduleByDayAction:', err);
        await ctx.reply('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.');
    }
}
