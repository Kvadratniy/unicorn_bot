import { Scenes, Markup } from 'telegraf';
import { deleteMessageSafe, getCallbackData } from '../../../utils/helpers';
import { clearLastKeyboard, replyMessage, replyWithKeyboard } from '../../../utils/keyboard';
import { abonementService } from '../abonement.service';

type AbonementCtx = UnicornWizardContext & {
    wizard: Scenes.WizardContextWizard<UnicornWizardContext> & { state: AddAbonementWizardState };
};

/* -------------------------------------------------------------------------- */
/* üß©  –®–∞–≥ 1. –í—ã–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞                                                 */
/* -------------------------------------------------------------------------- */
async function stepSelectSubject(ctx: AbonementCtx) {
    const data = getCallbackData(ctx);
    const match = data.match(/abonement_add_(\d+)/);
    const studentId = match ? parseInt(match[1], 10) : NaN;

    if (isNaN(studentId)) {
        await replyMessage(ctx, '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —É—á–µ–Ω–∏–∫–∞.');
        return ctx.scene.leave();
    }

    ctx.wizard.state.studentId = studentId;

    const subjects = await abonementService.getSubjects();
    if (!subjects.length) {
        await replyMessage(ctx, '‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤.');
        return ctx.scene.leave();
    }

    await replyWithKeyboard(
        ctx,
        'üìò –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞:',
        Markup.inlineKeyboard([
            ...subjects.map((s) => [Markup.button.callback(s.name, `abonement_subject_${s.id}`)]),
            [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', 'abonement_cancel')],
        ]),
    );

    return ctx.wizard.next();
}

/* -------------------------------------------------------------------------- */
/* üß©  –®–∞–≥ 2. –í—ã–±–æ—Ä —à–∞–±–ª–æ–Ω–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞                                       */
/* -------------------------------------------------------------------------- */
async function stepSelectTemplate(ctx: AbonementCtx) {
    const data = getCallbackData(ctx);
    await deleteMessageSafe(ctx);

    if (data === 'abonement_cancel') {
        await replyMessage(ctx, '‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
        return ctx.scene.leave();
    }

    const match = data.match(/abonement_subject_(\d+)/);
    if (!match) return;
    const subjectId = parseInt(match[1], 10);
    ctx.wizard.state.subjectId = subjectId;

    const templates = await abonementService.getTemplatesBySubject(subjectId);
    if (!templates.length) {
        await replyMessage(ctx, '‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞.');
        return ctx.scene.leave();
    }

    await clearLastKeyboard(ctx);
    await replyWithKeyboard(
        ctx,
        'üé´ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞:',
        Markup.inlineKeyboard([
            ...templates.map((t) => [
                Markup.button.callback(
                    `${t.name}`,
                    `abonement_template_${t.id}`,
                ),
            ]),
            [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', 'abonement_cancel')],
        ]),
    );

    return ctx.wizard.next();
}

/* -------------------------------------------------------------------------- */
/* üß©  –®–∞–≥ 3. –í—ã–±–æ—Ä –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è                                            */
/* -------------------------------------------------------------------------- */
async function stepSelectTeacher(ctx: AbonementCtx) {
    const data = getCallbackData(ctx);
    await deleteMessageSafe(ctx);

    if (data === 'abonement_cancel') {
        await replyMessage(ctx, '‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
        return ctx.scene.leave();
    }

    const match = data.match(/abonement_template_(\d+)/);
    if (!match) return;

    const templateId = parseInt(match[1], 10);
    ctx.wizard.state.templateId = templateId;

    const { subjectId } = ctx.wizard.state;
    const teachers = await abonementService.getTeachersBySubject(subjectId!);

    if (!teachers.length) {
        await replyMessage(ctx, '‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –ø–æ —ç—Ç–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É.');
        return ctx.scene.leave();
    }

    await clearLastKeyboard(ctx);
    await replyWithKeyboard(
        ctx,
        'üë®‚Äçüè´ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:',
        Markup.inlineKeyboard([
            ...teachers.map((t) => [Markup.button.callback(t.name, `abonement_teacher_${t.id}`)]),
            [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', 'abonement_cancel')],
        ]),
    );

    return ctx.wizard.next();
}

/* -------------------------------------------------------------------------- */
/* üß©  –®–∞–≥ 4. –°–æ–∑–¥–∞–Ω–∏–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞                                            */
/* -------------------------------------------------------------------------- */
async function stepCreateAbonement(ctx: AbonementCtx) {
    const data = getCallbackData(ctx);
    await deleteMessageSafe(ctx);

    if (data === 'abonement_cancel') {
        await replyMessage(ctx, '‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
        return ctx.scene.leave();
    }

    const match = data.match(/abonement_teacher_(\d+)/);
    if (!match) return;
    const teacherId = parseInt(match[1], 10);
    ctx.wizard.state.teacherId = teacherId;

    const { studentId, subjectId, templateId } = ctx.wizard.state;
    const template = await abonementService.getTemplateById(templateId!);
    const teacher = await abonementService.getTeacherById(teacherId);

    if (!template || !teacher || !studentId) {
        await replyMessage(ctx, '‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞.');
        return ctx.scene.leave();
    }

    const startDate = new Date();
    const endDate = new Date(startDate);
    endDate.setDate(endDate.getDate() + template.duration);

    const abonement = await abonementService.createAbonement({
        templateId: templateId!,
        studentId: studentId,
        teacherId: teacherId,
        subjectId: subjectId!,
        startDate,
        endDate,
    });

    // üîó –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —É—á–µ–Ω–∏–∫–∞ –∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é (–µ—Å–ª–∏ –Ω–µ —Å–≤—è–∑–∞–Ω)
    await abonementService.connectTeacherAndStudent(teacherId, studentId);

    await clearLastKeyboard(ctx);
    await replyMessage(
        ctx,
        `‚úÖ *–ê–±–æ–Ω–µ–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!*\n\n` +
            `üë®‚Äçüéì –£—á–µ–Ω–∏–∫: *#${studentId}*\n` +
            `üìò –ü—Ä–µ–¥–º–µ—Ç: ${template.subject.name}\n` +
            `üé´ –ê–±–æ–Ω–µ–º–µ–Ω—Ç: ${template.name}\n` +
            `üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: ${teacher.name}\n` +
            `üìÖ –°—Ä–æ–∫: ${startDate.toLocaleDateString('ru-RU')} ‚Äî ${endDate.toLocaleDateString('ru-RU')}`,
        {
            parse_mode: 'Markdown',
            ...Markup.inlineKeyboard([
                [Markup.button.callback('üí≥ –î–æ–±–∞–≤–∏—Ç—å –æ–ø–ª–∞—Ç—É', `payment${abonement.id}`)],
                [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')],
            ]),
        },
    );
    return ctx.scene.leave();
}

/* -------------------------------------------------------------------------- */
/* üß≠ –≠–∫—Å–ø–æ—Ä—Ç —Å—Ü–µ–Ω—ã                                                          */
/* -------------------------------------------------------------------------- */
export const addAbonementScene = new Scenes.WizardScene<AbonementCtx>(
    'add-abonement-wizard',
    stepSelectSubject,
    stepSelectTemplate,
    stepSelectTeacher,
    stepCreateAbonement,
);
