import { Markup } from 'telegraf';
import { abonementService } from '../abonement.service';

export async function showAbonementTemplatesAction(ctx: any) {
    await ctx.answerCbQuery();

    const templates = await abonementService.getAllTemplates();

    if (!templates.length) {
        return ctx.editMessageText('üì≠ –ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤.', {
            reply_markup: Markup.inlineKeyboard([
                [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–∏–ø', 'abonement_template_add')],
                [Markup.button.callback('‚¨Ö –ù–∞–∑–∞–¥', 'menu_abonement_templates')],
            ]).reply_markup,
        });
    }

    let text = 'üé´ *–°–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤:*\n\n';

    for (const t of templates) {
        text += `‚Ä¢ *${t.name}*\n`;
        text += `üìò –ü—Ä–µ–¥–º–µ—Ç: ${t.subject?.name ?? '‚Äî'}\n`;
        text += `üìö ${t.lessons} –∑–∞–Ω—è—Ç–∏–π\n`;
        text += `‚è± ${t.duration} –¥–Ω–µ–π\n`;
        text += '\n';
    }

    await ctx.editMessageText(text, {
        parse_mode: 'Markdown',
        reply_markup: Markup.inlineKeyboard([
            [Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'abonement_template_list')],
            [Markup.button.callback('‚¨Ö –ù–∞–∑–∞–¥', 'menu_abonement_templates')],
        ]).reply_markup,
    });
}
