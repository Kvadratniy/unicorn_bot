import prisma from '../../core/prisma';
import { Prisma } from '@prisma/client';

export const abonementService = {
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —à–∞–±–ª–æ–Ω—ã –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤
     */
    async getAllTemplates() {
        try {
            return await prisma.abonementTemplate.findMany({
                include: {
                    subject: { select: { name: true } },
                },
                orderBy: { price: 'asc' },
            });
        } catch (error) {
            console.error('abonementTemplateService.getAllTemplates error:', error);
            throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤');
        }
    },

    /** –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ */
    async getSubjects() {
        return prisma.subject.findMany({ orderBy: { name: 'asc' } });
    },

    /** –ü–æ–ª—É—á–∏—Ç—å —à–∞–±–ª–æ–Ω—ã –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É */
    async getTemplatesBySubject(subjectId: number) {
        return prisma.abonementTemplate.findMany({
            where: { subjectId },
            orderBy: { price: 'asc' },
        });
    },

    /** –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π, –≤–µ–¥—É—â–∏—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç */
    async getTeachersBySubject(subjectId: number) {
        return prisma.teacher.findMany({
            where: { subjects: { some: { id: subjectId } } },
            orderBy: { name: 'asc' },
        });
    },

    /** –ü–æ–ª—É—á–∏—Ç—å —à–∞–±–ª–æ–Ω –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ –ø–æ ID */
    async getTemplateById(id: number) {
        return prisma.abonementTemplate.findUnique({
            where: { id },
            include: { subject: true },
        });
    },

    /** –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –ø–æ ID */
    async getTeacherById(id: number) {
        return prisma.teacher.findUnique({ where: { id } });
    },

    /** –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç */
    async createAbonement(data: {
        templateId: number;
        studentId: number;
        teacherId: number;
        subjectId: number;
        startDate: Date;
        endDate: Date;
    }) {
        return prisma.abonement.create({ data });
    },

    async getUnpaidAbonements() {
        try {
            return await prisma.abonement.findMany({
                where: { status: 'UNPAIND' },
                include: {
                    student: true,
                    teacher: true,
                    Subject: true, // üëà –µ—Å–ª–∏ –≤ —Å—Ö–µ–º–µ –∏–º–µ–Ω–Ω–æ —Ç–∞–∫
                    template: { include: { subject: true } },
                },
                orderBy: { createdAt: 'desc' },
            });
        } catch (error) {
            console.error('abonementService.getUnpaidAbonements error:', error);
            throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤');
        }
    },

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
     */
    async updateStatus(id: number, status: Prisma.AbonementUpdateInput['status']) {
        try {
            return await prisma.abonement.update({
                where: { id },
                data: { status },
            });
        } catch (error) {
            console.error('abonementService.updateStatus error:', error);
            throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞');
        }
    },

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç –ø–æ ID
     */
    async getById(id: number) {
        return prisma.abonement.findUnique({
            where: { id },
            include: { template: true, Subject: true },
        });
    },

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ã —É—á–µ–Ω–∏–∫–∞ —É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
     */
    async getByStudentAndTeacher(studentId: number, teacherId: number) {
        return prisma.abonement.findMany({
            where: {
                studentId,
                teacherId,
                status: { in: ['ACTIVE', 'UNPAIND'] },
            },
            include: {
                template: true,
                Subject: true,
            },
            orderBy: { createdAt: 'desc' },
        });
    },
};
