import prisma from '../core/prisma';

export async function userContextMiddleware(ctx: any, next: any) {
    try {
        // üîπ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∞–ø–¥–µ–π—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç CRON)
        if (!ctx.from?.id) return next();

        // üîπ –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ —Å–µ—Å—Å–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (!ctx.session) ctx.session = {};

        // ‚ö°Ô∏è –ï—Å–ª–∏ –≤ —Å–µ—Å—Å–∏–∏ –Ω–µ—Ç user ‚Äî –≥—Ä—É–∑–∏–º –∏–∑ –±–∞–∑—ã
        if (!ctx.session.user) {
            const telegramId = ctx.from.id.toString();
            const user = await prisma.user.findUnique({
                where: { telegramId },
                include: {
                    teacher: {
                        include: {
                            subjects: true,
                            students: true,
                        },
                    },
                },
            });

            if (user) {
                ctx.session.user = user;
            } else {
                console.warn(`‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegramId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            }
        }

        // üì¶ –ö–ª–∞–¥—ë–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        ctx.user = ctx.session.user;

        return next();
    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ userContextMiddleware:', err);
        return next();
    }
}
