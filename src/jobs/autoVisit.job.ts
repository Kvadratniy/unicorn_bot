import cron from 'node-cron';
import prisma from '../core/prisma';
import { Telegraf } from 'telegraf';
import { toMSKfromUTC } from '../utils/time';
import {
    LessonType,
    PaymentStatus,
    PaymentType,
    PaymentMethod,
    TeacherTransactionType,
} from '@prisma/client';

const bot = new Telegraf(process.env.BOT_TOKEN!);

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–∑–∏—Ç–æ–≤
 */
export function initCreateVisitsJob() {
    cron.schedule(
        '*/1 * * * *',
        async () => {
            try {
                const now = new Date();
                const in5min = new Date(now.getTime() + 5 * 60 * 1000);

                console.log(
                    `[CRON] –ü—Ä–æ–≤–µ—Ä—è–µ–º: ${now.toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' })} ‚Äî ${in5min.toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' })}`,
                );

                // === 1Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –∑–∞–Ω—è—Ç–∏—è ===
                const schedules = await loadSchedules(now, in5min);
                if (!schedules.length) return console.log('‚ö†Ô∏è –ù–µ—Ç –∑–∞–Ω—è—Ç–∏–π');

                // === 2Ô∏è‚É£ –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ===
                const admins = await prisma.user.findMany({ where: { role: 'ADMIN' } });

                // === 3Ô∏è‚É£ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –∑–∞–Ω—è—Ç–∏–µ ===
                for (const schedule of schedules) {
                    await handleSchedule(bot, admins, schedule, now);
                }
            } catch (e) {
                console.error('‚ùå –û—à–∏–±–∫–∞ CRON:', e);
            }
        },
        { timezone: 'Europe/Moscow' },
    );

    console.log('‚úÖ CRON: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑–∏—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω–æ');
}

/* -------------------------------------------------------------------------- */
/* üß© –ë–õ–û–ö 1. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö */
/* -------------------------------------------------------------------------- */

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –∑–∞–Ω—è—Ç–∏—è, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è –≤ –±–ª–∏–∂–∞–π—à–∏–µ 5 –º–∏–Ω—É—Ç.
 */
async function loadSchedules(now: Date, in5min: Date) {
    return prisma.schedule.findMany({
        where: { startDate: { gte: now, lt: in5min } },
        include: { students: true, teacher: true, subject: true },
    });
}

/* -------------------------------------------------------------------------- */
/* üß© –ë–õ–û–ö 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è */
/* -------------------------------------------------------------------------- */

async function handleSchedule(bot: Telegraf, admins: any[], schedule: any, now: Date) {
    for (const student of schedule.students) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ–∑–¥–∞–Ω –ª–∏ –≤–∏–∑–∏—Ç
        const existing = await prisma.visit.findFirst({
            where: { scheduleId: schedule.id, studentId: student.id },
        });
        if (existing) continue;

        switch (schedule.type) {
            case LessonType.TRIAL:
                await handleTrialLesson(bot, admins, schedule, student);
                break;

            case LessonType.ABONEMENT:
                await handleAbonementLesson(bot, admins, schedule, student, now);
                break;

            case LessonType.ONETIME:
                await handleOnetimeLesson(bot, admins, schedule, student, now);
                break;
        }
    }
}

/* -------------------------------------------------------------------------- */
/* üß© –ë–õ–û–ö 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤ —É—Ä–æ–∫–æ–≤ */
/* -------------------------------------------------------------------------- */

/**
 * –ü—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ ‚Äî –≤–∏–∑–∏—Ç –±–µ–∑ –æ–ø–ª–∞—Ç—ã –∏ –±–µ–∑ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞.
 */
async function handleTrialLesson(bot: Telegraf, admins: any[], schedule: any, student: any) {
    console.log(`üéì –ü—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ: ${student.firstName}`);

    await prisma.visit.create({
        data: {
            date: schedule.startDate,
            studentId: student.id,
            scheduleId: schedule.id,
        },
    });

    await notifyAdmins(bot, admins, schedule, student, '–°–æ–∑–¥–∞–Ω –≤–∏–∑–∏—Ç (–ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ)');
}

/**
 * –ê–±–æ–Ω–µ–º–µ–Ω—Ç–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ ‚Äî –≤–∏–∑–∏—Ç, —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–º.
 */
async function handleAbonementLesson(
    bot: Telegraf,
    admins: any[],
    schedule: any,
    student: any,
    now: Date,
) {
    const abonement = await prisma.abonement.findFirst({
        where: {
            studentId: student.id,
            teacherId: schedule.teacherId,
            subjectId: schedule.subjectId,
            startDate: { lte: now },
            endDate: { gte: now },
        },
    });

    if (!abonement) {
        console.warn(`‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ —É ${student.firstName}`);
        return;
    }

    await prisma.visit.create({
        data: {
            date: schedule.startDate,
            studentId: student.id,
            scheduleId: schedule.id,
            abonementId: abonement.id,
        },
    });

    await createTeacherTransaction(schedule);

    await notifyAdmins(bot, admins, schedule, student, '–°–æ–∑–¥–∞–Ω –≤–∏–∑–∏—Ç (–ø–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç—É)');
}

/**
 * –†–∞–∑–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ ‚Äî –≤–∏–∑–∏—Ç + –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã.
 */
async function handleOnetimeLesson(
    bot: Telegraf,
    admins: any[],
    schedule: any,
    student: any,
    now: Date,
) {
    console.log(`üí∏ –†–∞–∑–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ: ${student.firstName}`);

    const visit = await prisma.visit.create({
        data: {
            date: schedule.startDate,
            studentId: student.id,
            scheduleId: schedule.id,
        },
    });

    await prisma.payment.create({
        data: {
            studentId: student.id,
            type: PaymentType.SINGLE_LESSON,
            status: PaymentStatus.PENDING,
            method: PaymentMethod.CASH,
            amount: 2000,
            date: now,
            comment: '–†–∞–∑–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ',
            visitId: visit.id,
        },
    });

    await createTeacherTransaction(schedule);

    await notifyAdmins(bot, admins, schedule, student, '–°–æ–∑–¥–∞–Ω –≤–∏–∑–∏—Ç –∏ –æ–ø–ª–∞—Ç–∞ (—Ä–∞–∑–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ)');
}

/* -------------------------------------------------------------------------- */
/* üß© –ë–õ–û–ö 4. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */
/* -------------------------------------------------------------------------- */

async function notifyAdmins(
    bot: Telegraf,
    admins: any[],
    schedule: any,
    student: any,
    prefix: string,
) {
    const msg =
        `üìã *${prefix}*\n` +
        `üë®‚Äçüéì ${student.firstName}\n` +
        `üìò ${schedule.subject.name}\n` +
        `üë®‚Äçüè´ ${schedule.teacher.name}\n` +
        `üïí ${toMSKfromUTC(schedule.startDate).toLocaleString('ru-RU', {
            timeZone: 'Europe/Moscow',
        })}`;

    for (const admin of admins) {
        if (!admin.telegramId) continue;
        await bot.telegram
            .sendMessage(admin.telegramId, msg, { parse_mode: 'Markdown' })
            .catch(() => {});
    }
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ TeacherTransaction –ø—Ä–∏ –≤–∏–∑–∏—Ç–µ + –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
 */
async function createTeacherTransaction(schedule: any) {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è —Å –±–∞–∑–æ–≤–æ–π —Å—Ç–∞–≤–∫–æ–π
    const teacher = await prisma.teacher.findUnique({
        where: { id: schedule.teacherId },
        select: { id: true, baseRate: true },
    });

    if (!teacher || !teacher.baseRate) {
        console.warn(`‚ö†Ô∏è –£ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è ID=${schedule.teacherId} –Ω–µ —É–∫–∞–∑–∞–Ω–∞ baseRate`);
        return;
    }

    // 1Ô∏è‚É£ –°–æ–∑–¥–∞—ë–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    await prisma.teacherTransaction.create({
        data: {
            teacherId: teacher.id,
            type: TeacherTransactionType.LESSON_INCOME,
            amount: teacher.baseRate,
            description: '–î–æ—Ö–æ–¥ –∑–∞ –ø—Ä–æ–≤–µ–¥—ë–Ω–Ω—ã–π —É—Ä–æ–∫',
            scheduleId: schedule.id,
        },
    });

    // 2Ô∏è‚É£ –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
    await prisma.teacher.update({
        where: { id: teacher.id },
        data: {
            balance: { increment: teacher.baseRate },
        },
    });

    console.log(
        `üí∞ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é ID=${teacher.id} (+${teacher.baseRate} ‚ÇΩ, –±–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª—ë–Ω)`,
    );
}
